{"remainingRequest":"D:\\Java\\Code\\Blog\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Java\\Code\\Blog\\docs\\.vuepress\\theme\\layouts\\Layout.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Java\\Code\\Blog\\docs\\.vuepress\\theme\\layouts\\Layout.vue","mtime":1649042041719},{"path":"D:\\Java\\Code\\Blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Java\\Code\\Blog\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\Java\\Code\\Blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Java\\Code\\Blog\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}